
Lab-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080017f4  080017f4  000027f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001818  08001818  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001818  08001818  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001818  08001818  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001818  08001818  00002818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800181c  0800181c  0000281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001820  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000010  0800182c  00003010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  0800182c  00003068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000257b  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d5e  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  00006310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002e3  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d0f  00000000  00000000  000069fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043d7  00000000  00000000  0000770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bc36  00000000  00000000  0000bae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00087717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dfc  00000000  00000000  0008775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00088558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080017dc 	.word	0x080017dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080017dc 	.word	0x080017dc

0800014c <clearAllAlgo>:


//Help Function


void clearAllAlgo(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	modeNow = OFF;
 8000150:	4b12      	ldr	r3, [pc, #72]	@ (800019c <clearAllAlgo+0x50>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]
	Flag1 = 0x00;
 8000156:	4b12      	ldr	r3, [pc, #72]	@ (80001a0 <clearAllAlgo+0x54>)
 8000158:	2200      	movs	r2, #0
 800015a:	701a      	strb	r2, [r3, #0]

	BufferHelpTime = 0;
 800015c:	4911      	ldr	r1, [pc, #68]	@ (80001a4 <clearAllAlgo+0x58>)
 800015e:	f04f 0200 	mov.w	r2, #0
 8000162:	f04f 0300 	mov.w	r3, #0
 8000166:	e9c1 2300 	strd	r2, r3, [r1]
	RedTime = 0;
 800016a:	490f      	ldr	r1, [pc, #60]	@ (80001a8 <clearAllAlgo+0x5c>)
 800016c:	f04f 0200 	mov.w	r2, #0
 8000170:	f04f 0300 	mov.w	r3, #0
 8000174:	e9c1 2300 	strd	r2, r3, [r1]
	YellowTime = 0;
 8000178:	490c      	ldr	r1, [pc, #48]	@ (80001ac <clearAllAlgo+0x60>)
 800017a:	f04f 0200 	mov.w	r2, #0
 800017e:	f04f 0300 	mov.w	r3, #0
 8000182:	e9c1 2300 	strd	r2, r3, [r1]
	GreenTime = 0;
 8000186:	490a      	ldr	r1, [pc, #40]	@ (80001b0 <clearAllAlgo+0x64>)
 8000188:	f04f 0200 	mov.w	r2, #0
 800018c:	f04f 0300 	mov.w	r3, #0
 8000190:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000061 	.word	0x20000061
 80001a0:	20000060 	.word	0x20000060
 80001a4:	20000048 	.word	0x20000048
 80001a8:	20000030 	.word	0x20000030
 80001ac:	20000038 	.word	0x20000038
 80001b0:	20000040 	.word	0x20000040

080001b4 <Switch_State>:

void Switch_State(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	if(modeNow == OFF){
 80001b8:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <Switch_State+0x3c>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d105      	bne.n	80001cc <Switch_State+0x18>
		clearAllAlgo();
 80001c0:	f7ff ffc4 	bl	800014c <clearAllAlgo>
		modeNow = ALGORITM_1;
 80001c4:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <Switch_State+0x3c>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	701a      	strb	r2, [r3, #0]
		modeNow = ALGORITM_2;
	}else{
		clearAllAlgo();
		modeNow = OFF;
	}
}
 80001ca:	e00e      	b.n	80001ea <Switch_State+0x36>
	}else if(modeNow == ALGORITM_1){
 80001cc:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <Switch_State+0x3c>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d105      	bne.n	80001e0 <Switch_State+0x2c>
		clearAllAlgo();
 80001d4:	f7ff ffba 	bl	800014c <clearAllAlgo>
		modeNow = ALGORITM_2;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <Switch_State+0x3c>)
 80001da:	2202      	movs	r2, #2
 80001dc:	701a      	strb	r2, [r3, #0]
}
 80001de:	e004      	b.n	80001ea <Switch_State+0x36>
		clearAllAlgo();
 80001e0:	f7ff ffb4 	bl	800014c <clearAllAlgo>
		modeNow = OFF;
 80001e4:	4b02      	ldr	r3, [pc, #8]	@ (80001f0 <Switch_State+0x3c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000061 	.word	0x20000061

080001f4 <Led_Controle>:

void Led_Controle(){
 80001f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af00      	add	r7, sp, #0
	//Red
	if(RedTime > TIME_NOW){
 80001fc:	f000 fdd2 	bl	8000da4 <HAL_GetTick>
 8000200:	4603      	mov	r3, r0
 8000202:	2200      	movs	r2, #0
 8000204:	603b      	str	r3, [r7, #0]
 8000206:	607a      	str	r2, [r7, #4]
 8000208:	4b34      	ldr	r3, [pc, #208]	@ (80002dc <Led_Controle+0xe8>)
 800020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800020e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000212:	4684      	mov	ip, r0
 8000214:	4594      	cmp	ip, r2
 8000216:	4199      	sbcs	r1, r3
 8000218:	d206      	bcs.n	8000228 <Led_Controle+0x34>
		RED_ON;
 800021a:	4b31      	ldr	r3, [pc, #196]	@ (80002e0 <Led_Controle+0xec>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	4a30      	ldr	r2, [pc, #192]	@ (80002e0 <Led_Controle+0xec>)
 8000220:	f043 0310 	orr.w	r3, r3, #16
 8000224:	60d3      	str	r3, [r2, #12]
 8000226:	e005      	b.n	8000234 <Led_Controle+0x40>
	}else{
		RED_OFF;
 8000228:	4b2d      	ldr	r3, [pc, #180]	@ (80002e0 <Led_Controle+0xec>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a2c      	ldr	r2, [pc, #176]	@ (80002e0 <Led_Controle+0xec>)
 800022e:	f023 0310 	bic.w	r3, r3, #16
 8000232:	60d3      	str	r3, [r2, #12]
	}
	//Yellow
	if(YellowTime > TIME_NOW){
 8000234:	f000 fdb6 	bl	8000da4 <HAL_GetTick>
 8000238:	4603      	mov	r3, r0
 800023a:	2200      	movs	r2, #0
 800023c:	469a      	mov	sl, r3
 800023e:	4693      	mov	fp, r2
 8000240:	4b28      	ldr	r3, [pc, #160]	@ (80002e4 <Led_Controle+0xf0>)
 8000242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000246:	4592      	cmp	sl, r2
 8000248:	eb7b 0303 	sbcs.w	r3, fp, r3
 800024c:	d206      	bcs.n	800025c <Led_Controle+0x68>
		YELLOW_ON;
 800024e:	4b24      	ldr	r3, [pc, #144]	@ (80002e0 <Led_Controle+0xec>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	4a23      	ldr	r2, [pc, #140]	@ (80002e0 <Led_Controle+0xec>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	60d3      	str	r3, [r2, #12]
 800025a:	e005      	b.n	8000268 <Led_Controle+0x74>
	}else{
		YELLOW_OFF;
 800025c:	4b20      	ldr	r3, [pc, #128]	@ (80002e0 <Led_Controle+0xec>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a1f      	ldr	r2, [pc, #124]	@ (80002e0 <Led_Controle+0xec>)
 8000262:	f023 0304 	bic.w	r3, r3, #4
 8000266:	60d3      	str	r3, [r2, #12]
	}
	//Green
	if(GreenTime > TIME_NOW){
 8000268:	f000 fd9c 	bl	8000da4 <HAL_GetTick>
 800026c:	4603      	mov	r3, r0
 800026e:	2200      	movs	r2, #0
 8000270:	4698      	mov	r8, r3
 8000272:	4691      	mov	r9, r2
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <Led_Controle+0xf4>)
 8000276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800027a:	4590      	cmp	r8, r2
 800027c:	eb79 0303 	sbcs.w	r3, r9, r3
 8000280:	d206      	bcs.n	8000290 <Led_Controle+0x9c>
		GREEN_ON;
 8000282:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <Led_Controle+0xec>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <Led_Controle+0xec>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	60d3      	str	r3, [r2, #12]
 800028e:	e005      	b.n	800029c <Led_Controle+0xa8>
	}else{
		GREEN_OFF;
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <Led_Controle+0xec>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a12      	ldr	r2, [pc, #72]	@ (80002e0 <Led_Controle+0xec>)
 8000296:	f023 0301 	bic.w	r3, r3, #1
 800029a:	60d3      	str	r3, [r2, #12]
	}

	if(blim > TIME_NOW){
 800029c:	f000 fd82 	bl	8000da4 <HAL_GetTick>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2200      	movs	r2, #0
 80002a4:	461c      	mov	r4, r3
 80002a6:	4615      	mov	r5, r2
 80002a8:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <Led_Controle+0xf8>)
 80002aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002ae:	4294      	cmp	r4, r2
 80002b0:	eb75 0303 	sbcs.w	r3, r5, r3
 80002b4:	d206      	bcs.n	80002c4 <Led_Controle+0xd0>
			GPIOC->ODR &= ~(1 << 13);
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <Led_Controle+0xfc>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <Led_Controle+0xfc>)
 80002bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002c0:	60d3      	str	r3, [r2, #12]
		}else{
			GPIOC->ODR |= (1 << 13);
		}
}
 80002c2:	e005      	b.n	80002d0 <Led_Controle+0xdc>
			GPIOC->ODR |= (1 << 13);
 80002c4:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <Led_Controle+0xfc>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a09      	ldr	r2, [pc, #36]	@ (80002f0 <Led_Controle+0xfc>)
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ce:	60d3      	str	r3, [r2, #12]
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80002da:	bf00      	nop
 80002dc:	20000030 	.word	0x20000030
 80002e0:	40010800 	.word	0x40010800
 80002e4:	20000038 	.word	0x20000038
 80002e8:	20000040 	.word	0x20000040
 80002ec:	20000058 	.word	0x20000058
 80002f0:	40011000 	.word	0x40011000

080002f4 <SetLight>:


void SetLight(uint16_t time, LED_SELECTOR led){
 80002f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80002f8:	b084      	sub	sp, #16
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	460a      	mov	r2, r1
 8000300:	81fb      	strh	r3, [r7, #14]
 8000302:	4613      	mov	r3, r2
 8000304:	737b      	strb	r3, [r7, #13]
	switch(led){
 8000306:	7b7b      	ldrb	r3, [r7, #13]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d83d      	bhi.n	8000388 <SetLight+0x94>
 800030c:	a201      	add	r2, pc, #4	@ (adr r2, 8000314 <SetLight+0x20>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000325 	.word	0x08000325
 8000318:	08000341 	.word	0x08000341
 800031c:	08000359 	.word	0x08000359
 8000320:	08000371 	.word	0x08000371
		case GREEN:
			GreenTime = TIME_NOW + time;
 8000324:	f000 fd3e 	bl	8000da4 <HAL_GetTick>
 8000328:	4602      	mov	r2, r0
 800032a:	89fb      	ldrh	r3, [r7, #14]
 800032c:	4413      	add	r3, r2
 800032e:	2200      	movs	r2, #0
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	607a      	str	r2, [r7, #4]
 8000334:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <SetLight+0xa0>)
 8000336:	e9d7 1200 	ldrd	r1, r2, [r7]
 800033a:	e9c3 1200 	strd	r1, r2, [r3]
		break;
 800033e:	e023      	b.n	8000388 <SetLight+0x94>
		case YELLOW:
			YellowTime = TIME_NOW + time;
 8000340:	f000 fd30 	bl	8000da4 <HAL_GetTick>
 8000344:	4602      	mov	r2, r0
 8000346:	89fb      	ldrh	r3, [r7, #14]
 8000348:	4413      	add	r3, r2
 800034a:	2200      	movs	r2, #0
 800034c:	469a      	mov	sl, r3
 800034e:	4693      	mov	fp, r2
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <SetLight+0xa4>)
 8000352:	e9c3 ab00 	strd	sl, fp, [r3]
		break;
 8000356:	e017      	b.n	8000388 <SetLight+0x94>

		case RED:
			RedTime = TIME_NOW + time;
 8000358:	f000 fd24 	bl	8000da4 <HAL_GetTick>
 800035c:	4602      	mov	r2, r0
 800035e:	89fb      	ldrh	r3, [r7, #14]
 8000360:	4413      	add	r3, r2
 8000362:	2200      	movs	r2, #0
 8000364:	4698      	mov	r8, r3
 8000366:	4691      	mov	r9, r2
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <SetLight+0xa8>)
 800036a:	e9c3 8900 	strd	r8, r9, [r3]
		break;
 800036e:	e00b      	b.n	8000388 <SetLight+0x94>

		case PC13:
			blim = TIME_NOW + time;
 8000370:	f000 fd18 	bl	8000da4 <HAL_GetTick>
 8000374:	4602      	mov	r2, r0
 8000376:	89fb      	ldrh	r3, [r7, #14]
 8000378:	4413      	add	r3, r2
 800037a:	2200      	movs	r2, #0
 800037c:	461c      	mov	r4, r3
 800037e:	4615      	mov	r5, r2
 8000380:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <SetLight+0xac>)
 8000382:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 8000386:	bf00      	nop

	}
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000392:	bf00      	nop
 8000394:	20000040 	.word	0x20000040
 8000398:	20000038 	.word	0x20000038
 800039c:	20000030 	.word	0x20000030
 80003a0:	20000058 	.word	0x20000058

080003a4 <Algo_1>:



void Algo_1(){
 80003a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80003a8:	b0aa      	sub	sp, #168	@ 0xa8
 80003aa:	af00      	add	r7, sp, #0
	if(modeNow == ALGORITM_1){
 80003ac:	4b83      	ldr	r3, [pc, #524]	@ (80005bc <Algo_1+0x218>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	f040 8167 	bne.w	8000684 <Algo_1+0x2e0>
		if(!Flag1){
 80003b6:	4b82      	ldr	r3, [pc, #520]	@ (80005c0 <Algo_1+0x21c>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d114      	bne.n	80003e8 <Algo_1+0x44>
			BufferHelpTime = TIME_NOW;
 80003be:	f000 fcf1 	bl	8000da4 <HAL_GetTick>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2200      	movs	r2, #0
 80003c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80003ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80003ce:	4b7d      	ldr	r3, [pc, #500]	@ (80005c4 <Algo_1+0x220>)
 80003d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80003d4:	e9c3 1200 	strd	r1, r2, [r3]
			SetLight(9000, RED);
 80003d8:	2102      	movs	r1, #2
 80003da:	f242 3028 	movw	r0, #9000	@ 0x2328
 80003de:	f7ff ff89 	bl	80002f4 <SetLight>
			Flag1 = 0xFF;
 80003e2:	4a77      	ldr	r2, [pc, #476]	@ (80005c0 <Algo_1+0x21c>)
 80003e4:	23ff      	movs	r3, #255	@ 0xff
 80003e6:	7013      	strb	r3, [r2, #0]
		}
		if(WAIT_TIME(6000)){
 80003e8:	f000 fcdc 	bl	8000da4 <HAL_GetTick>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2200      	movs	r2, #0
 80003f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80003f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80003f8:	4b72      	ldr	r3, [pc, #456]	@ (80005c4 <Algo_1+0x220>)
 80003fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003fe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8000402:	4684      	mov	ip, r0
 8000404:	ebbc 0402 	subs.w	r4, ip, r2
 8000408:	eb61 0503 	sbc.w	r5, r1, r3
 800040c:	f241 73a3 	movw	r3, #6051	@ 0x17a3
 8000410:	429c      	cmp	r4, r3
 8000412:	f175 0300 	sbcs.w	r3, r5, #0
 8000416:	d21d      	bcs.n	8000454 <Algo_1+0xb0>
 8000418:	f000 fcc4 	bl	8000da4 <HAL_GetTick>
 800041c:	4603      	mov	r3, r0
 800041e:	2200      	movs	r2, #0
 8000420:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000424:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000428:	4b66      	ldr	r3, [pc, #408]	@ (80005c4 <Algo_1+0x220>)
 800042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800042e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000432:	4604      	mov	r4, r0
 8000434:	ebb4 0802 	subs.w	r8, r4, r2
 8000438:	eb61 0903 	sbc.w	r9, r1, r3
 800043c:	f241 733e 	movw	r3, #5950	@ 0x173e
 8000440:	4598      	cmp	r8, r3
 8000442:	f179 0300 	sbcs.w	r3, r9, #0
 8000446:	d305      	bcc.n	8000454 <Algo_1+0xb0>
			SetLight(1000, YELLOW);
 8000448:	2101      	movs	r1, #1
 800044a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800044e:	f7ff ff51 	bl	80002f4 <SetLight>
 8000452:	e0f4      	b.n	800063e <Algo_1+0x29a>
		}else if(WAIT_TIME(8000)){
 8000454:	f000 fca6 	bl	8000da4 <HAL_GetTick>
 8000458:	4603      	mov	r3, r0
 800045a:	2200      	movs	r2, #0
 800045c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000460:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000464:	4b57      	ldr	r3, [pc, #348]	@ (80005c4 <Algo_1+0x220>)
 8000466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800046e:	4604      	mov	r4, r0
 8000470:	ebb4 0a02 	subs.w	sl, r4, r2
 8000474:	eb61 0b03 	sbc.w	fp, r1, r3
 8000478:	f641 7373 	movw	r3, #8051	@ 0x1f73
 800047c:	459a      	cmp	sl, r3
 800047e:	f17b 0300 	sbcs.w	r3, fp, #0
 8000482:	d222      	bcs.n	80004ca <Algo_1+0x126>
 8000484:	f000 fc8e 	bl	8000da4 <HAL_GetTick>
 8000488:	4603      	mov	r3, r0
 800048a:	2200      	movs	r2, #0
 800048c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000490:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000494:	4b4b      	ldr	r3, [pc, #300]	@ (80005c4 <Algo_1+0x220>)
 8000496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800049a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800049e:	4604      	mov	r4, r0
 80004a0:	1aa4      	subs	r4, r4, r2
 80004a2:	67bc      	str	r4, [r7, #120]	@ 0x78
 80004a4:	eb61 0303 	sbc.w	r3, r1, r3
 80004a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80004aa:	f641 730e 	movw	r3, #7950	@ 0x1f0e
 80004ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80004b2:	4608      	mov	r0, r1
 80004b4:	4298      	cmp	r0, r3
 80004b6:	4613      	mov	r3, r2
 80004b8:	f173 0300 	sbcs.w	r3, r3, #0
 80004bc:	d305      	bcc.n	80004ca <Algo_1+0x126>
			SetLight(1000, YELLOW);
 80004be:	2101      	movs	r1, #1
 80004c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c4:	f7ff ff16 	bl	80002f4 <SetLight>
 80004c8:	e0b9      	b.n	800063e <Algo_1+0x29a>
		}else if(WAIT_TIME(9000)){
 80004ca:	f000 fc6b 	bl	8000da4 <HAL_GetTick>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2200      	movs	r2, #0
 80004d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80004d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80004d6:	4b3b      	ldr	r3, [pc, #236]	@ (80005c4 <Algo_1+0x220>)
 80004d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80004e0:	4604      	mov	r4, r0
 80004e2:	1aa4      	subs	r4, r4, r2
 80004e4:	66bc      	str	r4, [r7, #104]	@ 0x68
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80004ec:	f242 335b 	movw	r3, #9051	@ 0x235b
 80004f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80004f4:	4608      	mov	r0, r1
 80004f6:	4298      	cmp	r0, r3
 80004f8:	4613      	mov	r3, r2
 80004fa:	f173 0300 	sbcs.w	r3, r3, #0
 80004fe:	d220      	bcs.n	8000542 <Algo_1+0x19e>
 8000500:	f000 fc50 	bl	8000da4 <HAL_GetTick>
 8000504:	4603      	mov	r3, r0
 8000506:	2200      	movs	r2, #0
 8000508:	663b      	str	r3, [r7, #96]	@ 0x60
 800050a:	667a      	str	r2, [r7, #100]	@ 0x64
 800050c:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <Algo_1+0x220>)
 800050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000512:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000516:	4604      	mov	r4, r0
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000522:	f242 23f6 	movw	r3, #8950	@ 0x22f6
 8000526:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800052a:	4608      	mov	r0, r1
 800052c:	4298      	cmp	r0, r3
 800052e:	4613      	mov	r3, r2
 8000530:	f173 0300 	sbcs.w	r3, r3, #0
 8000534:	d305      	bcc.n	8000542 <Algo_1+0x19e>
			SetLight(7000, GREEN);
 8000536:	2100      	movs	r1, #0
 8000538:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800053c:	f7ff feda 	bl	80002f4 <SetLight>
 8000540:	e07d      	b.n	800063e <Algo_1+0x29a>
		}else if(WAIT_TIME(16000)){
 8000542:	f000 fc2f 	bl	8000da4 <HAL_GetTick>
 8000546:	4603      	mov	r3, r0
 8000548:	2200      	movs	r2, #0
 800054a:	653b      	str	r3, [r7, #80]	@ 0x50
 800054c:	657a      	str	r2, [r7, #84]	@ 0x54
 800054e:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <Algo_1+0x220>)
 8000550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000554:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000558:	4604      	mov	r4, r0
 800055a:	1aa4      	subs	r4, r4, r2
 800055c:	64bc      	str	r4, [r7, #72]	@ 0x48
 800055e:	eb61 0303 	sbc.w	r3, r1, r3
 8000562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000564:	f643 63b3 	movw	r3, #16051	@ 0x3eb3
 8000568:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800056c:	4608      	mov	r0, r1
 800056e:	4298      	cmp	r0, r3
 8000570:	4613      	mov	r3, r2
 8000572:	f173 0300 	sbcs.w	r3, r3, #0
 8000576:	d227      	bcs.n	80005c8 <Algo_1+0x224>
 8000578:	f000 fc14 	bl	8000da4 <HAL_GetTick>
 800057c:	4603      	mov	r3, r0
 800057e:	2200      	movs	r2, #0
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
 8000582:	647a      	str	r2, [r7, #68]	@ 0x44
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <Algo_1+0x220>)
 8000586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800058a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800058e:	4604      	mov	r4, r0
 8000590:	1aa4      	subs	r4, r4, r2
 8000592:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000594:	eb61 0303 	sbc.w	r3, r1, r3
 8000598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800059a:	f643 634e 	movw	r3, #15950	@ 0x3e4e
 800059e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80005a2:	4608      	mov	r0, r1
 80005a4:	4298      	cmp	r0, r3
 80005a6:	4613      	mov	r3, r2
 80005a8:	f173 0300 	sbcs.w	r3, r3, #0
 80005ac:	d30c      	bcc.n	80005c8 <Algo_1+0x224>
			SetLight(1000, YELLOW);
 80005ae:	2101      	movs	r1, #1
 80005b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b4:	f7ff fe9e 	bl	80002f4 <SetLight>
 80005b8:	e041      	b.n	800063e <Algo_1+0x29a>
 80005ba:	bf00      	nop
 80005bc:	20000061 	.word	0x20000061
 80005c0:	20000060 	.word	0x20000060
 80005c4:	20000048 	.word	0x20000048
		}else if(WAIT_TIME(18000)){
 80005c8:	f000 fbec 	bl	8000da4 <HAL_GetTick>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2200      	movs	r2, #0
 80005d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80005d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80005d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <Algo_1+0x2ec>)
 80005d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80005de:	4604      	mov	r4, r0
 80005e0:	1aa4      	subs	r4, r4, r2
 80005e2:	62bc      	str	r4, [r7, #40]	@ 0x28
 80005e4:	eb61 0303 	sbc.w	r3, r1, r3
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005ea:	f244 6383 	movw	r3, #18051	@ 0x4683
 80005ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80005f2:	4608      	mov	r0, r1
 80005f4:	4298      	cmp	r0, r3
 80005f6:	4613      	mov	r3, r2
 80005f8:	f173 0300 	sbcs.w	r3, r3, #0
 80005fc:	d21f      	bcs.n	800063e <Algo_1+0x29a>
 80005fe:	f000 fbd1 	bl	8000da4 <HAL_GetTick>
 8000602:	4603      	mov	r3, r0
 8000604:	2200      	movs	r2, #0
 8000606:	623b      	str	r3, [r7, #32]
 8000608:	627a      	str	r2, [r7, #36]	@ 0x24
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <Algo_1+0x2ec>)
 800060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000610:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000614:	4604      	mov	r4, r0
 8000616:	1aa4      	subs	r4, r4, r2
 8000618:	61bc      	str	r4, [r7, #24]
 800061a:	eb61 0303 	sbc.w	r3, r1, r3
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	f244 631e 	movw	r3, #17950	@ 0x461e
 8000624:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000628:	4608      	mov	r0, r1
 800062a:	4298      	cmp	r0, r3
 800062c:	4613      	mov	r3, r2
 800062e:	f173 0300 	sbcs.w	r3, r3, #0
 8000632:	d304      	bcc.n	800063e <Algo_1+0x29a>
			SetLight(1000, YELLOW);
 8000634:	2101      	movs	r1, #1
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f7ff fe5b 	bl	80002f4 <SetLight>
		}

		if(TIME_NOW - BufferHelpTime > end_algo){
 800063e:	f000 fbb1 	bl	8000da4 <HAL_GetTick>
 8000642:	4603      	mov	r3, r0
 8000644:	2200      	movs	r2, #0
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	617a      	str	r2, [r7, #20]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <Algo_1+0x2ec>)
 800064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000650:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000654:	4604      	mov	r4, r0
 8000656:	1aa4      	subs	r4, r4, r2
 8000658:	60bc      	str	r4, [r7, #8]
 800065a:	eb61 0303 	sbc.w	r3, r1, r3
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	f644 53ee 	movw	r3, #19950	@ 0x4dee
 8000664:	b29b      	uxth	r3, r3
 8000666:	2200      	movs	r2, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000670:	4618      	mov	r0, r3
 8000672:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000676:	460d      	mov	r5, r1
 8000678:	42a8      	cmp	r0, r5
 800067a:	4623      	mov	r3, r4
 800067c:	4193      	sbcs	r3, r2
 800067e:	d201      	bcs.n	8000684 <Algo_1+0x2e0>
			clearAllAlgo();
 8000680:	f7ff fd64 	bl	800014c <clearAllAlgo>
		}
	}
}
 8000684:	bf00      	nop
 8000686:	37a8      	adds	r7, #168	@ 0xa8
 8000688:	46bd      	mov	sp, r7
 800068a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800068e:	bf00      	nop
 8000690:	20000048 	.word	0x20000048

08000694 <Algo_2>:

void Algo_2(){
 8000694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000698:	b0aa      	sub	sp, #168	@ 0xa8
 800069a:	af00      	add	r7, sp, #0
	if(modeNow == ALGORITM_2){
 800069c:	4b83      	ldr	r3, [pc, #524]	@ (80008ac <Algo_2+0x218>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	f040 8167 	bne.w	8000974 <Algo_2+0x2e0>
		if(!Flag1){
 80006a6:	4b82      	ldr	r3, [pc, #520]	@ (80008b0 <Algo_2+0x21c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d114      	bne.n	80006d8 <Algo_2+0x44>
			BufferHelpTime = TIME_NOW;
 80006ae:	f000 fb79 	bl	8000da4 <HAL_GetTick>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2200      	movs	r2, #0
 80006b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80006ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80006be:	4b7d      	ldr	r3, [pc, #500]	@ (80008b4 <Algo_2+0x220>)
 80006c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80006c4:	e9c3 1200 	strd	r1, r2, [r3]
			SetLight(9000, GREEN);
 80006c8:	2100      	movs	r1, #0
 80006ca:	f242 3028 	movw	r0, #9000	@ 0x2328
 80006ce:	f7ff fe11 	bl	80002f4 <SetLight>
			Flag1 = 0xFF;
 80006d2:	4a77      	ldr	r2, [pc, #476]	@ (80008b0 <Algo_2+0x21c>)
 80006d4:	23ff      	movs	r3, #255	@ 0xff
 80006d6:	7013      	strb	r3, [r2, #0]
		}


		if(WAIT_TIME(6000)){
 80006d8:	f000 fb64 	bl	8000da4 <HAL_GetTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80006e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80006e8:	4b72      	ldr	r3, [pc, #456]	@ (80008b4 <Algo_2+0x220>)
 80006ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80006f2:	4684      	mov	ip, r0
 80006f4:	ebbc 0402 	subs.w	r4, ip, r2
 80006f8:	eb61 0503 	sbc.w	r5, r1, r3
 80006fc:	f241 73a3 	movw	r3, #6051	@ 0x17a3
 8000700:	429c      	cmp	r4, r3
 8000702:	f175 0300 	sbcs.w	r3, r5, #0
 8000706:	d21d      	bcs.n	8000744 <Algo_2+0xb0>
 8000708:	f000 fb4c 	bl	8000da4 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	2200      	movs	r2, #0
 8000710:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000714:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8000718:	4b66      	ldr	r3, [pc, #408]	@ (80008b4 <Algo_2+0x220>)
 800071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000722:	4604      	mov	r4, r0
 8000724:	ebb4 0802 	subs.w	r8, r4, r2
 8000728:	eb61 0903 	sbc.w	r9, r1, r3
 800072c:	f241 733e 	movw	r3, #5950	@ 0x173e
 8000730:	4598      	cmp	r8, r3
 8000732:	f179 0300 	sbcs.w	r3, r9, #0
 8000736:	d305      	bcc.n	8000744 <Algo_2+0xb0>
			SetLight(1000, YELLOW);
 8000738:	2101      	movs	r1, #1
 800073a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073e:	f7ff fdd9 	bl	80002f4 <SetLight>
 8000742:	e0f4      	b.n	800092e <Algo_2+0x29a>
		}else if(WAIT_TIME(8000)){
 8000744:	f000 fb2e 	bl	8000da4 <HAL_GetTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2200      	movs	r2, #0
 800074c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000750:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000754:	4b57      	ldr	r3, [pc, #348]	@ (80008b4 <Algo_2+0x220>)
 8000756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800075a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800075e:	4604      	mov	r4, r0
 8000760:	ebb4 0a02 	subs.w	sl, r4, r2
 8000764:	eb61 0b03 	sbc.w	fp, r1, r3
 8000768:	f641 7373 	movw	r3, #8051	@ 0x1f73
 800076c:	459a      	cmp	sl, r3
 800076e:	f17b 0300 	sbcs.w	r3, fp, #0
 8000772:	d222      	bcs.n	80007ba <Algo_2+0x126>
 8000774:	f000 fb16 	bl	8000da4 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
 800077a:	2200      	movs	r2, #0
 800077c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000780:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000784:	4b4b      	ldr	r3, [pc, #300]	@ (80008b4 <Algo_2+0x220>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800078e:	4604      	mov	r4, r0
 8000790:	1aa4      	subs	r4, r4, r2
 8000792:	67bc      	str	r4, [r7, #120]	@ 0x78
 8000794:	eb61 0303 	sbc.w	r3, r1, r3
 8000798:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800079a:	f641 730e 	movw	r3, #7950	@ 0x1f0e
 800079e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80007a2:	4608      	mov	r0, r1
 80007a4:	4298      	cmp	r0, r3
 80007a6:	4613      	mov	r3, r2
 80007a8:	f173 0300 	sbcs.w	r3, r3, #0
 80007ac:	d305      	bcc.n	80007ba <Algo_2+0x126>
			SetLight(1000, YELLOW);
 80007ae:	2101      	movs	r1, #1
 80007b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b4:	f7ff fd9e 	bl	80002f4 <SetLight>
 80007b8:	e0b9      	b.n	800092e <Algo_2+0x29a>
		}else if(WAIT_TIME(9000)){
 80007ba:	f000 faf3 	bl	8000da4 <HAL_GetTick>
 80007be:	4603      	mov	r3, r0
 80007c0:	2200      	movs	r2, #0
 80007c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80007c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80007c6:	4b3b      	ldr	r3, [pc, #236]	@ (80008b4 <Algo_2+0x220>)
 80007c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80007d0:	4604      	mov	r4, r0
 80007d2:	1aa4      	subs	r4, r4, r2
 80007d4:	66bc      	str	r4, [r7, #104]	@ 0x68
 80007d6:	eb61 0303 	sbc.w	r3, r1, r3
 80007da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80007dc:	f242 335b 	movw	r3, #9051	@ 0x235b
 80007e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80007e4:	4608      	mov	r0, r1
 80007e6:	4298      	cmp	r0, r3
 80007e8:	4613      	mov	r3, r2
 80007ea:	f173 0300 	sbcs.w	r3, r3, #0
 80007ee:	d220      	bcs.n	8000832 <Algo_2+0x19e>
 80007f0:	f000 fad8 	bl	8000da4 <HAL_GetTick>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2200      	movs	r2, #0
 80007f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80007fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <Algo_2+0x220>)
 80007fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000802:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000806:	4604      	mov	r4, r0
 8000808:	1aa4      	subs	r4, r4, r2
 800080a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800080c:	eb61 0303 	sbc.w	r3, r1, r3
 8000810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000812:	f242 23f6 	movw	r3, #8950	@ 0x22f6
 8000816:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800081a:	4608      	mov	r0, r1
 800081c:	4298      	cmp	r0, r3
 800081e:	4613      	mov	r3, r2
 8000820:	f173 0300 	sbcs.w	r3, r3, #0
 8000824:	d305      	bcc.n	8000832 <Algo_2+0x19e>
			SetLight(7000, GREEN);
 8000826:	2100      	movs	r1, #0
 8000828:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800082c:	f7ff fd62 	bl	80002f4 <SetLight>
 8000830:	e07d      	b.n	800092e <Algo_2+0x29a>
		}else if(WAIT_TIME(16000)){
 8000832:	f000 fab7 	bl	8000da4 <HAL_GetTick>
 8000836:	4603      	mov	r3, r0
 8000838:	2200      	movs	r2, #0
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
 800083c:	657a      	str	r2, [r7, #84]	@ 0x54
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <Algo_2+0x220>)
 8000840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000844:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000848:	4604      	mov	r4, r0
 800084a:	1aa4      	subs	r4, r4, r2
 800084c:	64bc      	str	r4, [r7, #72]	@ 0x48
 800084e:	eb61 0303 	sbc.w	r3, r1, r3
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000854:	f643 63b3 	movw	r3, #16051	@ 0x3eb3
 8000858:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800085c:	4608      	mov	r0, r1
 800085e:	4298      	cmp	r0, r3
 8000860:	4613      	mov	r3, r2
 8000862:	f173 0300 	sbcs.w	r3, r3, #0
 8000866:	d227      	bcs.n	80008b8 <Algo_2+0x224>
 8000868:	f000 fa9c 	bl	8000da4 <HAL_GetTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2200      	movs	r2, #0
 8000870:	643b      	str	r3, [r7, #64]	@ 0x40
 8000872:	647a      	str	r2, [r7, #68]	@ 0x44
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <Algo_2+0x220>)
 8000876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800087e:	4604      	mov	r4, r0
 8000880:	1aa4      	subs	r4, r4, r2
 8000882:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000884:	eb61 0303 	sbc.w	r3, r1, r3
 8000888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800088a:	f643 634e 	movw	r3, #15950	@ 0x3e4e
 800088e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8000892:	4608      	mov	r0, r1
 8000894:	4298      	cmp	r0, r3
 8000896:	4613      	mov	r3, r2
 8000898:	f173 0300 	sbcs.w	r3, r3, #0
 800089c:	d30c      	bcc.n	80008b8 <Algo_2+0x224>
			SetLight(1000, YELLOW);
 800089e:	2101      	movs	r1, #1
 80008a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a4:	f7ff fd26 	bl	80002f4 <SetLight>
 80008a8:	e041      	b.n	800092e <Algo_2+0x29a>
 80008aa:	bf00      	nop
 80008ac:	20000061 	.word	0x20000061
 80008b0:	20000060 	.word	0x20000060
 80008b4:	20000048 	.word	0x20000048
		}else if(WAIT_TIME(18000)){
 80008b8:	f000 fa74 	bl	8000da4 <HAL_GetTick>
 80008bc:	4603      	mov	r3, r0
 80008be:	2200      	movs	r2, #0
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80008c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80008c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <Algo_2+0x2ec>)
 80008c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80008ce:	4604      	mov	r4, r0
 80008d0:	1aa4      	subs	r4, r4, r2
 80008d2:	62bc      	str	r4, [r7, #40]	@ 0x28
 80008d4:	eb61 0303 	sbc.w	r3, r1, r3
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008da:	f244 6383 	movw	r3, #18051	@ 0x4683
 80008de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80008e2:	4608      	mov	r0, r1
 80008e4:	4298      	cmp	r0, r3
 80008e6:	4613      	mov	r3, r2
 80008e8:	f173 0300 	sbcs.w	r3, r3, #0
 80008ec:	d21f      	bcs.n	800092e <Algo_2+0x29a>
 80008ee:	f000 fa59 	bl	8000da4 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2200      	movs	r2, #0
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <Algo_2+0x2ec>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000904:	4604      	mov	r4, r0
 8000906:	1aa4      	subs	r4, r4, r2
 8000908:	61bc      	str	r4, [r7, #24]
 800090a:	eb61 0303 	sbc.w	r3, r1, r3
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	f244 631e 	movw	r3, #17950	@ 0x461e
 8000914:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000918:	4608      	mov	r0, r1
 800091a:	4298      	cmp	r0, r3
 800091c:	4613      	mov	r3, r2
 800091e:	f173 0300 	sbcs.w	r3, r3, #0
 8000922:	d304      	bcc.n	800092e <Algo_2+0x29a>
			SetLight(1000, YELLOW);
 8000924:	2101      	movs	r1, #1
 8000926:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092a:	f7ff fce3 	bl	80002f4 <SetLight>
		}

		if(TIME_NOW - BufferHelpTime > end_algo){
 800092e:	f000 fa39 	bl	8000da4 <HAL_GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	2200      	movs	r2, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	617a      	str	r2, [r7, #20]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <Algo_2+0x2ec>)
 800093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000944:	4604      	mov	r4, r0
 8000946:	1aa4      	subs	r4, r4, r2
 8000948:	60bc      	str	r4, [r7, #8]
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	f644 53ee 	movw	r3, #19950	@ 0x4dee
 8000954:	b29b      	uxth	r3, r3
 8000956:	2200      	movs	r2, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000960:	4618      	mov	r0, r3
 8000962:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000966:	460d      	mov	r5, r1
 8000968:	42a8      	cmp	r0, r5
 800096a:	4623      	mov	r3, r4
 800096c:	4193      	sbcs	r3, r2
 800096e:	d201      	bcs.n	8000974 <Algo_2+0x2e0>
			clearAllAlgo();
 8000970:	f7ff fbec 	bl	800014c <clearAllAlgo>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	37a8      	adds	r7, #168	@ 0xa8
 8000978:	46bd      	mov	sp, r7
 800097a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800097e:	bf00      	nop
 8000980:	20000048 	.word	0x20000048

08000984 <Button_Cheker>:

void Button_Cheker(){
 8000984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000988:	af00      	add	r7, sp, #0
	if((!(GPIOB->IDR & (1 << 3)))  && (TIME_NOW - BtnDelayTime >= 500)){
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <Button_Cheker+0x5c>)
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b00      	cmp	r3, #0
 8000994:	d121      	bne.n	80009da <Button_Cheker+0x56>
 8000996:	f000 fa05 	bl	8000da4 <HAL_GetTick>
 800099a:	4603      	mov	r3, r0
 800099c:	2200      	movs	r2, #0
 800099e:	4698      	mov	r8, r3
 80009a0:	4691      	mov	r9, r2
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <Button_Cheker+0x60>)
 80009a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a8:	ebb8 0402 	subs.w	r4, r8, r2
 80009ac:	eb69 0503 	sbc.w	r5, r9, r3
 80009b0:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 80009b4:	f175 0300 	sbcs.w	r3, r5, #0
 80009b8:	d30f      	bcc.n	80009da <Button_Cheker+0x56>
		BtnDelayTime = TIME_NOW;
 80009ba:	f000 f9f3 	bl	8000da4 <HAL_GetTick>
 80009be:	4603      	mov	r3, r0
 80009c0:	2200      	movs	r2, #0
 80009c2:	469a      	mov	sl, r3
 80009c4:	4693      	mov	fp, r2
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <Button_Cheker+0x60>)
 80009c8:	e9c3 ab00 	strd	sl, fp, [r3]
		SetLight(500, PC13);
 80009cc:	2103      	movs	r1, #3
 80009ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d2:	f7ff fc8f 	bl	80002f4 <SetLight>
		Switch_State();
 80009d6:	f7ff fbed 	bl	80001b4 <Switch_State>
	}
}
 80009da:	bf00      	nop
 80009dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	20000050 	.word	0x20000050

080009e8 <Lab_outputL2>:

//Standart Function
void Lab_outputL2(){
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	// 0, 2, 4 - Out

	RCC->APB2ENR |= (1 << 2) | (1 << 4);
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <Lab_outputL2+0x70>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a19      	ldr	r2, [pc, #100]	@ (8000a58 <Lab_outputL2+0x70>)
 80009f2:	f043 0314 	orr.w	r3, r3, #20
 80009f6:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &= ~ ( (0xF << 0) | (0xF << 8) | (0xF << 16) );
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <Lab_outputL2+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <Lab_outputL2+0x74>)
 80009fe:	f023 130f 	bic.w	r3, r3, #983055	@ 0xf000f
 8000a02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a06:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= (0b0001 << 0); // PA0 -Output
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0b0001 << 8); // PA2 -Output
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a1e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0b0001 << 16);// PA4 -Output
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a2a:	6013      	str	r3, [r2, #0]
	GPIOC->CRH |= (0b0001 << 20);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <Lab_outputL2+0x78>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <Lab_outputL2+0x78>)
 8000a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a36:	6053      	str	r3, [r2, #4]

	GPIOC->ODR &= ~(1 << 13);
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <Lab_outputL2+0x78>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <Lab_outputL2+0x78>)
 8000a3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000a42:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR &= ~( (1 << 0) | (1 << 2) | (1 << 4));
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <Lab_outputL2+0x74>)
 8000a4a:	f023 0315 	bic.w	r3, r3, #21
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40011000 	.word	0x40011000

08000a64 <Lab_inputL2>:

void Lab_inputL2(){
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 3);
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <Lab_inputL2+0x3c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <Lab_inputL2+0x3c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= ~(0xF << 12);// PB3
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000a7e:	6013      	str	r3, [r2, #0]

	GPIOB->CRL |= (0b1000  << 12);
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a8a:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (1 << 3);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <Lab_inputL2+0x40>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <testLed>:


void testLed(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	YELLOW_ON;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <testLed+0x58>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <testLed+0x58>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	60d3      	str	r3, [r2, #12]
	GREEN_ON;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <testLed+0x58>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <testLed+0x58>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	60d3      	str	r3, [r2, #12]
	RED_ON;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <testLed+0x58>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <testLed+0x58>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	60d3      	str	r3, [r2, #12]
	HAL_Delay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad4:	f000 f970 	bl	8000db8 <HAL_Delay>
	YELLOW_OFF;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <testLed+0x58>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <testLed+0x58>)
 8000ade:	f023 0304 	bic.w	r3, r3, #4
 8000ae2:	60d3      	str	r3, [r2, #12]
	GREEN_OFF;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <testLed+0x58>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <testLed+0x58>)
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	60d3      	str	r3, [r2, #12]
	RED_OFF;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <testLed+0x58>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a02      	ldr	r2, [pc, #8]	@ (8000b00 <testLed+0x58>)
 8000af6:	f023 0310 	bic.w	r3, r3, #16
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <Lab_setupL2>:

void Lab_setupL2(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	Lab_inputL2();
 8000b08:	f7ff ffac 	bl	8000a64 <Lab_inputL2>
	Lab_outputL2();
 8000b0c:	f7ff ff6c 	bl	80009e8 <Lab_outputL2>

	testLed();
 8000b10:	f7ff ffca 	bl	8000aa8 <testLed>

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Lab_loopL2>:



void Lab_loopL2(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	Led_Controle();
 8000b1c:	f7ff fb6a 	bl	80001f4 <Led_Controle>
	Button_Cheker();
 8000b20:	f7ff ff30 	bl	8000984 <Button_Cheker>

	Algo_1();
 8000b24:	f7ff fc3e 	bl	80003a4 <Algo_1>
	Algo_2();
 8000b28:	f7ff fdb4 	bl	8000694 <Algo_2>





}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <Lab_loop>:
		Lab_setupL1();
	}
#elif defined LAB_2
	#include "Lab-2/Lab-2.h"

	void Lab_loop(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
		Lab_loopL2();
 8000b34:	f7ff fff0 	bl	8000b18 <Lab_loopL2>
	}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <Lab_setup>:

	void Lab_input(){
		Lab_inputL2();
	}

	void Lab_setup(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
		Lab_setupL2();
 8000b40:	f7ff ffe0 	bl	8000b04 <Lab_setupL2>
	}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 f8d2 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f805 	bl	8000b5e <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  	  Lab_setup();
 8000b54:	f7ff fff2 	bl	8000b3c <Lab_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 Lab_loop();
 8000b58:	f7ff ffea 	bl	8000b30 <Lab_loop>
 8000b5c:	e7fc      	b.n	8000b58 <main+0x10>

08000b5e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b090      	sub	sp, #64	@ 0x40
 8000b62:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	2228      	movs	r2, #40	@ 0x28
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fe09 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fa17 	bl	8000fc8 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ba0:	f000 f818 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fc85 	bl	80014cc <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bc8:	f000 f804 	bl	8000bd4 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3740      	adds	r7, #64	@ 0x40
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_MspInit+0x60>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_MspInit+0x60>)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f874 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff fff8 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cae:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc4:	4c09      	ldr	r4, [pc, #36]	@ (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f000 fd5f 	bl	8001794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff ff37 	bl	8000b48 <main>
  bx lr
 8000cda:	4770      	bx	lr
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	08001820 	.word	0x08001820
  ldr r2, =_sbss
 8000ce8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cec:	20000068 	.word	0x20000068

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f92b 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff ff66 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f935 	bl	8000fae <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d5c:	f000 f90b 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a03      	ldr	r2, [pc, #12]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000064 	.word	0x20000064

08000da4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b02      	ldr	r3, [pc, #8]	@ (8000db4 <HAL_GetTick+0x10>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000064 	.word	0x20000064

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fff0 	bl	8000da4 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffe0 	bl	8000da4 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f40:	f7ff ff90 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff49 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e272      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8087 	beq.w	80010f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe8:	4b92      	ldr	r3, [pc, #584]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d00c      	beq.n	800100e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d112      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
 8001000:	4b8c      	ldr	r3, [pc, #560]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b89      	ldr	r3, [pc, #548]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d06c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x12c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d168      	bne.n	80010f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e24c      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x76>
 8001030:	4b80      	ldr	r3, [pc, #512]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a7f      	ldr	r2, [pc, #508]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e02e      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b7b      	ldr	r3, [pc, #492]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7a      	ldr	r2, [pc, #488]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b78      	ldr	r3, [pc, #480]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a77      	ldr	r2, [pc, #476]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0xbc>
 800106a:	4b72      	ldr	r3, [pc, #456]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a71      	ldr	r2, [pc, #452]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6f      	ldr	r3, [pc, #444]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6e      	ldr	r2, [pc, #440]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001084:	4b6b      	ldr	r3, [pc, #428]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6a      	ldr	r2, [pc, #424]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a67      	ldr	r2, [pc, #412]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fe7e 	bl	8000da4 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fe7a 	bl	8000da4 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	@ 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e200      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xe4>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fe6a 	bl	8000da4 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fe66 	bl	8000da4 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1ec      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x10c>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001102:	4b4c      	ldr	r3, [pc, #304]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800110e:	4b49      	ldr	r3, [pc, #292]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
 800111a:	4b46      	ldr	r3, [pc, #280]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1c0      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4939      	ldr	r1, [pc, #228]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <HAL_RCC_OscConfig+0x270>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fe1f 	bl	8000da4 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fe1b 	bl	8000da4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1a1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4927      	ldr	r1, [pc, #156]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <HAL_RCC_OscConfig+0x270>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fdfe 	bl	8000da4 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fdfa 	bl	8000da4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e180      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03a      	beq.n	800124c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d019      	beq.n	8001212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_RCC_OscConfig+0x274>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fdde 	bl	8000da4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fdda 	bl	8000da4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e160      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 fa9c 	bl	8001748 <RCC_Delay>
 8001210:	e01c      	b.n	800124c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_RCC_OscConfig+0x274>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fdc4 	bl	8000da4 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121e:	e00f      	b.n	8001240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fdc0 	bl	8000da4 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d908      	bls.n	8001240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e146      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	42420000 	.word	0x42420000
 800123c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b92      	ldr	r3, [pc, #584]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e9      	bne.n	8001220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a6 	beq.w	80013a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b8b      	ldr	r3, [pc, #556]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a87      	ldr	r2, [pc, #540]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b7f      	ldr	r3, [pc, #508]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7e      	ldr	r2, [pc, #504]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fd81 	bl	8000da4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fd7d 	bl	8000da4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	@ 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e103      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b75      	ldr	r3, [pc, #468]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x312>
 80012cc:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6e      	ldr	r2, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x334>
 80012e2:	4b6a      	ldr	r3, [pc, #424]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a69      	ldr	r2, [pc, #420]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b67      	ldr	r3, [pc, #412]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a66      	ldr	r2, [pc, #408]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x356>
 8001304:	4b61      	ldr	r3, [pc, #388]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a60      	ldr	r2, [pc, #384]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	4b5e      	ldr	r3, [pc, #376]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a5d      	ldr	r2, [pc, #372]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a57      	ldr	r2, [pc, #348]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fd31 	bl	8000da4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fd2d 	bl	8000da4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0b1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ee      	beq.n	8001346 <HAL_RCC_OscConfig+0x37e>
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fd1b 	bl	8000da4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fd17 	bl	8000da4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e09b      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8087 	beq.w	80014be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d061      	beq.n	8001480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d146      	bne.n	8001452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fceb 	bl	8000da4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fce7 	bl	8000da4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e06d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	4b29      	ldr	r3, [pc, #164]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4921      	ldr	r1, [pc, #132]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a19      	ldr	r1, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	430b      	orrs	r3, r1
 800141e:	491b      	ldr	r1, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fcbb 	bl	8000da4 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fcb7 	bl	8000da4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e03d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x46a>
 8001450:	e035      	b.n	80014be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fca4 	bl	8000da4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fca0 	bl	8000da4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e026      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x498>
 800147e:	e01e      	b.n	80014be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e019      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x500>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0d0      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d910      	bls.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4965      	ldr	r1, [pc, #404]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800154a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d040      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d115      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e073      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015aa:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4936      	ldr	r1, [pc, #216]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fbf2 	bl	8000da4 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fbee 	bl	8000da4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e053      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d210      	bcs.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4922      	ldr	r1, [pc, #136]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1cc>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb50 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	080017f4 	.word	0x080017f4
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x94>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x30>
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
 80016ce:	e027      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	e027      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x94>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	4a11      	ldr	r2, [pc, #68]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 8001702:	fb03 f202 	mul.w	r2, r3, r2
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e004      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	613b      	str	r3, [r7, #16]
      break;
 800171e:	e002      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 8001722:	613b      	str	r3, [r7, #16]
      break;
 8001724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001726:	693b      	ldr	r3, [r7, #16]
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	007a1200 	.word	0x007a1200
 800173c:	08001804 	.word	0x08001804
 8001740:	08001814 	.word	0x08001814
 8001744:	003d0900 	.word	0x003d0900

08001748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <RCC_Delay+0x34>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <RCC_Delay+0x38>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0a5b      	lsrs	r3, r3, #9
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001764:	bf00      	nop
  }
  while (Delay --);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <RCC_Delay+0x1c>
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000000 	.word	0x20000000
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <memset>:
 8001784:	4603      	mov	r3, r0
 8001786:	4402      	add	r2, r0
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	f803 1b01 	strb.w	r1, [r3], #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <__libc_init_array>:
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	2600      	movs	r6, #0
 8001798:	4d0c      	ldr	r5, [pc, #48]	@ (80017cc <__libc_init_array+0x38>)
 800179a:	4c0d      	ldr	r4, [pc, #52]	@ (80017d0 <__libc_init_array+0x3c>)
 800179c:	1b64      	subs	r4, r4, r5
 800179e:	10a4      	asrs	r4, r4, #2
 80017a0:	42a6      	cmp	r6, r4
 80017a2:	d109      	bne.n	80017b8 <__libc_init_array+0x24>
 80017a4:	f000 f81a 	bl	80017dc <_init>
 80017a8:	2600      	movs	r6, #0
 80017aa:	4d0a      	ldr	r5, [pc, #40]	@ (80017d4 <__libc_init_array+0x40>)
 80017ac:	4c0a      	ldr	r4, [pc, #40]	@ (80017d8 <__libc_init_array+0x44>)
 80017ae:	1b64      	subs	r4, r4, r5
 80017b0:	10a4      	asrs	r4, r4, #2
 80017b2:	42a6      	cmp	r6, r4
 80017b4:	d105      	bne.n	80017c2 <__libc_init_array+0x2e>
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
 80017b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017bc:	4798      	blx	r3
 80017be:	3601      	adds	r6, #1
 80017c0:	e7ee      	b.n	80017a0 <__libc_init_array+0xc>
 80017c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c6:	4798      	blx	r3
 80017c8:	3601      	adds	r6, #1
 80017ca:	e7f2      	b.n	80017b2 <__libc_init_array+0x1e>
 80017cc:	08001818 	.word	0x08001818
 80017d0:	08001818 	.word	0x08001818
 80017d4:	08001818 	.word	0x08001818
 80017d8:	0800181c 	.word	0x0800181c

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	bf00      	nop
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	bf00      	nop
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
